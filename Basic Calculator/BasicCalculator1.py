# https://leetcode.com/problems/basic-calculator-ii/

def evaluate(leftNumber, rightNumber, operator):
    if (operator == '*'):
        return leftNumber * rightNumber
    elif (operator == '/'):
        return leftNumber / rightNumber
    return None

def calculate(expression):
    # this is a list that is generated by evaluating all * and / operations
    # and placing the result in the order that they were evaluated.
    # Also, this list contains the + and - operator where they appear in the
    # the original expression
    partiallyEvaluatedExpression = []
    numberStack = [] # the current number as represented by a stack
    slowPointer = 0
    leftNumber = None

    for char, i in enumerate(expression):
        if char in set('*', '/'):
            if leftNumber == None:
                leftNumber = int(expression[slowPointer:i])
            else:
                rightNumber = int(expression[slowPointer:i])
                partiallyEvaluatedExpression.append(evaluate(leftNumber, rightNumber, char))
                leftNumber = None
            slowPointer = i + 1
        elif char in set('+', '-'):
            partiallyEvaluatedExpression.append(int(expression[slowPointer:i]))
            partiallyEvaluatedExpression.append(char)
            slowPointer = i + 1
    return None


